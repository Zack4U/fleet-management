// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  email            String   @unique
  first_name       String
  second_name      String?
  first_lastname   String
  second_lastname  String?
  avatar           String?  @default("logo-coca_cola.jpg")
  role             Roles    @default(DRIVER)
  current_password String
  active_user      Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tasks            Task[]
  routes           Route[]
}

enum Roles {
  ADMIN
  DRIVER
}

model Vehicle {
  id                      String        @id @default(auto()) @map("_id") @db.ObjectId
  plate                   String        @unique
  brand                   String
  line                    String
  model                   String
  type                    String
  capacity                Int
  kilometers              Int
  legals                  String        @default("Up to Date")
  statusId                VehicleStatus @default(AVAILABLE)
  fuelId                  String        @db.ObjectId
  fuel                    Fuel          @relation(fields: [fuelId], references: [id])
  pneumatics              Pneumatic[]
  oil                     Oil[]
  cooling                 Cooling[]
  lights                  Lights[]
  battery                 Battery[]
  maintenance             Maintenance[]
  image                   String?       @default("camion-coca_cola.jpg")
  last_maintenance        DateTime      @default(now())
  last_oil_change         DateTime      @default(now())
  last_cooling_change     DateTime      @default(now())
  last_battery_change     DateTime      @default(now())
  last_pneumatic_change   DateTime      @default(now())
  last_light_change       DateTime      @default(now())
  last_review_battery     DateTime      @default(now())
  last_review_pneumatic   DateTime      @default(now())
  last_review_light       DateTime      @default(now())
  oil_change_period       Period        @default(MONTHLY)
  cooling_change_period   Period        @default(QUARTERLY)
  battery_review_period   Period        @default(HALF_YEARLY)
  pneumatic_review_period Period        @default(HALF_YEARLY)
  light_review_period     Period        @default(YEARLY)
  position                Json
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  routes                  Route[]
}

model Fuel {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  liters      Float
  available   Float
  last_refuel DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  refueling   Refueling[]
  vehicle     Vehicle[]
}

model Refueling {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  liters    Float
  cost      Float
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fuel      Fuel?    @relation(fields: [fuelId], references: [id])
  fuelId    String?  @db.ObjectId
}

model Pneumatic {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  brand     String   @default("default")
  model     String   @default("default")
  size      String   @default("default")
  type      String   @default("default")
  wear      Int      @default(0)
  pressure  Int      @default(115)
  diameter  Int      @default(22)
  width     Int      @default(385)
  height    Int      @default(65)
  position  String
  in_use    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId String?  @db.ObjectId
}

model Oil {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  brand     String   @default("default")
  type      String   @default("default")
  liters    Float
  in_use    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId String?  @db.ObjectId
}

model Cooling {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  brand     String   @default("default")
  liters    Float
  in_use    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId String?  @db.ObjectId
}

model Lights {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  brand     String      @default("default")
  type      String      @default("default")
  position  String
  status    LightStatus @default(GOOD)
  in_use    Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  vehicle   Vehicle?    @relation(fields: [vehicleId], references: [id])
  vehicleId String?     @db.ObjectId
}

model Battery {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  brand     String        @default("default")
  type      String        @default("default")
  voltage   Float         @default(12)
  amperage  Float         @default(100)
  status    BatteryStatus @default(GOOD)
  in_use    Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  vehicle   Vehicle?      @relation(fields: [vehicleId], references: [id])
  vehicleId String?       @db.ObjectId
}

model Maintenance {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  schedule_date DateTime
  finish_date   DateTime?
  type          MaintenanceType
  cost          Float?
  notes         String?
  status        MaintenanceStatus @default(PENDING)
  vehicleId     String            @db.ObjectId
  vehicle       Vehicle           @relation(fields: [vehicleId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Route {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId           String      @db.ObjectId
  vehicle             Vehicle     @relation(fields: [vehicleId], references: [id])
  driverId            String      @db.ObjectId
  driver              User        @relation(fields: [driverId], references: [id])
  startLocation       Json
  endLocation         Json
  additionalLocations Json[]      @default([])
  startDateTime       DateTime?
  endDateTime         DateTime?
  duration            String
  distance            String
  dateScheduled       DateTime
  status              RouteStatus @default(PENDING)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  REGULAR
  EMERGENCY
  OIL_CHANGE
  COOLING_CHANGE
  LIGHT_CHANGE
  PNEUMATIC_CHANGE
  BATTERY_CHANGE
  LIGHT_REVIEW
  PNEUMATIC_REVIEW
  BATTERY_REVIEW
  REPAIR
}

enum MaintenanceStatus {
  PENDING
  IN_PROCESS
  FINISHED
  CANCELED
}

enum VehicleStatus {
  AVAILABLE
  UNAVAILABLE
  IN_MAINTENANCE
  IN_ROUTE
}

enum RouteStatus {
  PENDING
  IN_ROUTE
  FINISHED
  CANCELED
}

enum LightStatus {
  GOOD
  REGULAR
  BAD
  BROKEN
}

enum BatteryStatus {
  GOOD
  REGULAR
  BAD
  BROKEN
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  YEARLY
}

model Task {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  list      Int
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
