// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

model user {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  email            String   @unique
  first_name       String
  second_name      String?
  first_lastname   String
  second_lastname  String?
  avatar           String?  @default("logo-coca_cola.jpg")
  role             String   @default("driver")
  current_password String
  active_user      Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  Task             Task[]
  Routes           route[]
}

model vehicle {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  plate       String        @unique
  brand       String
  model       String
  type        String
  capacity    Int
  kilometers  Int
  legals      String        @default("Up to Date")
  statusId    vehicleStatus @default(AVAILABLE)
  fuelId      String        @db.ObjectId
  fuel        fuel          @relation(fields: [fuelId], references: [id])
  Pneumatics  pneumatic[]
  OilId       String        @db.ObjectId
  Oil         oil           @relation(fields: [OilId], references: [id])
  CoolingId   String        @db.ObjectId
  Cooling     cooling       @relation(fields: [CoolingId], references: [id])
  Lights      lights[]
  BatteryId   String        @db.ObjectId
  Battery     battery       @relation(fields: [BatteryId], references: [id])
  maintenance maintenance[]
  image       String?       @default("camion-coca_cola.jpg")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Routes      route[]
}

model fuel {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  liters    Float
  available Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  refueling refueling[]
  vehicle   vehicle[]
}

model refueling {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  liters    Float
  cost      Float
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fuel      fuel?    @relation(fields: [fuelId], references: [id])
  fuelId    String?  @db.ObjectId
}

model pneumatic {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  brand     String
  model     String
  size      String
  type      String
  wear      Int      @default(0)
  pressure  Int
  diameter  Int
  width     Int
  height    Int
  position  String
  in_use    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId String?  @db.ObjectId
}

model oil {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  brand     String
  type      String
  liters    Float
  in_use    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  vehicle   vehicle[]
}

model cooling {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  brand     String
  liters    Float
  in_use    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  vehicle   vehicle[]
}

model lights {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  brand     String
  type      String
  position  String
  in_use    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId String?  @db.ObjectId
}

model battery {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  brand     String
  type      String
  voltage   Float
  amperage  Float
  in_use    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  vehicle   vehicle[]
}

model maintenance {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  type      maintenanceType
  cost      Float
  notes     String?
  status    maintenanceStatus @default(PENDING)
  vehicleId String            @db.ObjectId
  vehicle   vehicle           @relation(fields: [vehicleId], references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model route {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId     String      @db.ObjectId
  vehicle       vehicle     @relation(fields: [vehicleId], references: [id])
  driverId      String      @db.ObjectId
  driver        user        @relation(fields: [driverId], references: [id])
  startLocation String
  endLocation   String
  startDateTime DateTime
  endDateTime   DateTime?
  status        routeStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum maintenanceType {
  PREVENTIVE
  CORRECTIVE
  REGURAL
  EMERGENCY
  PNEUMATICS_CHANGE
}

enum maintenanceStatus {
  PENDING
  IN_PROCESS
  FINISHED
  CANCELED
}

enum vehicleStatus {
  AVAILABLE
  UNAVAILABLE
  IN_MAINTENANCE
  IN_ROUTE
}

enum routeStatus {
  PENDING
  IN_ROUTE
  FINISHED
  CANCELED
}

model task {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  list      Int
  userId    String   @db.ObjectId
  user      user     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
